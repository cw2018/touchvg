/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class MgShapesLock : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgShapesLock(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MgShapesLock obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgShapesLock() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgShapesLock(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public MgShapesLock(int flags, MgView view, int timeout) : this(touchvgPINVOKE.new_MgShapesLock__SWIG_0(flags, MgView.getCPtr(view), timeout), true) {
  }

  public MgShapesLock(int flags, MgView view) : this(touchvgPINVOKE.new_MgShapesLock__SWIG_1(flags, MgView.getCPtr(view)), true) {
  }

  public MgShapesLock(MgView view, int timeout) : this(touchvgPINVOKE.new_MgShapesLock__SWIG_2(MgView.getCPtr(view), timeout), true) {
  }

  public MgShapesLock(MgView view) : this(touchvgPINVOKE.new_MgShapesLock__SWIG_3(MgView.getCPtr(view)), true) {
  }

  public bool locked() {
    bool ret = touchvgPINVOKE.MgShapesLock_locked(swigCPtr);
    return ret;
  }

  public void unlock() {
    touchvgPINVOKE.MgShapesLock_unlock(swigCPtr);
  }

  public static bool lockedForRead(MgView view) {
    bool ret = touchvgPINVOKE.MgShapesLock_lockedForRead(MgView.getCPtr(view));
    return ret;
  }

  public static bool lockedForWrite(MgView view) {
    bool ret = touchvgPINVOKE.MgShapesLock_lockedForWrite(MgView.getCPtr(view));
    return ret;
  }

  public int getEditFlags() {
    int ret = touchvgPINVOKE.MgShapesLock_getEditFlags(swigCPtr);
    return ret;
  }

  public void resetEditFlags() {
    touchvgPINVOKE.MgShapesLock_resetEditFlags(swigCPtr);
  }

  public static readonly int NotNotify = touchvgPINVOKE.MgShapesLock_NotNotify_get();
  public static readonly int ReadOnly = touchvgPINVOKE.MgShapesLock_ReadOnly_get();
  public static readonly int Add = touchvgPINVOKE.MgShapesLock_Add_get();
  public static readonly int Remove = touchvgPINVOKE.MgShapesLock_Remove_get();
  public static readonly int Edit = touchvgPINVOKE.MgShapesLock_Edit_get();
  public static readonly int Load = touchvgPINVOKE.MgShapesLock_Load_get();

}

}
